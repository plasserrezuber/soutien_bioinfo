configfile: "config.yml"
print("Config is: ", config)

CHROM = config['chromList']

onsuccess:
    print("Workflow finished with no error")

onstart:
    print("##### ClariTE annotation Workflow #####\n") 
    print("## Creating output folders ##\n")
    shell('mkdir -p logs')
    shell('mkdir -p logs/chrom')
    shell('mkdir -p results')
    shell('mkdir -p results/chrom')


rule all:
    input:
        "results/"+config['TeIDsPrefix']+"clariTE.gff3"


rule merge_chrom_gff3:
    output:
        "results/"+config['TeIDsPrefix']+"clariTE.gff3"
    input:
        expand("results/chrom/{chrom}_clariTE.gff3", chrom=CHROM)
    log:
        err="logs/"+config['TeIDsPrefix']+"gt_gff3_tidy.err"
    conda:
        "environment.yml"
    shell: "gt gff3 -sort -tidy -retainids {input} 1> {output} 2> {log.err}" 


rule check_gff3:
    output:
        "results/chrom/{chrom}_gff3validator.log"
    input:
        "results/chrom/{chrom}_clariTE.gff3"
    log:
        "logs/chrom/{chrom}_gt_gff3validator.err"
    conda:
        "environment.yml"
    shell:
        """
        gt gff3validator {input} 1> {output} 2> {log}
        """


rule embl_to_gff3:
    output:
        "results/chrom/{chrom}_clariTE.gff3"
    input:
        EMBL = glob_wildcards("results/chrom/{chrom}:{id}.fa.out_anno.embl"),
        EMBLl="results/chrom/{chrom}_chunks_embl_list.txt"
    params:
        config['TeIDsPrefix']
    conda:
        "environment.yml"
    shell:
        """
        bin/embl_to_gff3.sh {wildcards.chrom} {params}
        """


rule clariTE:
    output:
        EMBL = glob_wildcards("results/chrom/{chrom}:{id}.fa.out_anno.embl"),
        EMBLl="results/chrom/{chrom}_chunks_embl_list.txt"
    input:
        fasta = glob_wildcards("results/chrom/{chrom}:{id}.fa"),
        XM = glob_wildcards("results/chrom/{chrom}:{id}.fa.out.xm"),
        XMl = "results/chrom/{chrom}_chunks_xm_list.txt"
    conda:
        "environment.yml"
    shell:
        """
        sed -i 's/#Unspecified/#Unknown/' {input.XM}
        bin/clariTE_1.0/clariTE.pl -dir results/chrom/ -LTR bin/clariTE_1.0/CLARIwheat.LTR_position -classi bin/clariTE_1.0/CLARIwheat.classification -fasta {input.fasta} {input.XM}
        sed 's/fa.out.xm/fa.out_anno.embl/g' {input.XMl} > {output.EMBLl}
        """


rule repeatmasker:
    output:
        XM = glob_wildcards("results/chrom/{chrom}:{id}.fa.out.xm"),
        XMl = "results/chrom/{chrom}_chunks_xm_list.txt"
    input:
        ID = glob_wildcards("results/chrom/{chrom}:{id}.fa"),
        IDl = "results/chrom/{chrom}_chunks_fa_list.txt"
    threads: 16
    conda:
        "environment.yml"
    shell:
        """
        cd results/chrom
        RepeatMasker -e crossmatch -lib config['clariTElib'] -xsmall -nolow -xm -pa {threads} -q {input.ID}
        rm {input.ID}.cat {input.ID}.log {input.ID}.masked {input.ID}.ori.out {input.ID}.out {input.ID}.tbl
        sed 's/fa/fa.out.xm/g' {input.IDl} > {output.XMl}
        """


rule chunks_fasta:
    output:
        ID= glob_wildcards("results/chrom/{chrom}:{id}.fa"),
        IDl = "results/chrom/{chrom}_chunks_fa_list.txt"
    input: 
        "results/chrom/{chrom}.windows.fasta"
    conda:
        "environment.yml"
    shell:
        """
        fastaexplode -f {input} -d results/chrom
        fgrep '>' {input} |sed 's/>//' |tr '\n' ' ' |sed 's/ /.fa /g' > {output.IDl}
        """


rule chunks_multi_fasta:
    output:
        "results/chrom/{chrom}.windows.fasta"
    input:
        bed="results/chrom/{chrom}.windows.bed",
        fasta="results/chrom/{chrom}.fasta"
    conda:
        "environment.yml"
    shell: "bedtools getfasta -bed {input.bed} -fi {input.fasta} > {output}"


rule chunks_bed:
    output:
        "results/chrom/{chrom}.windows.bed"
    input:
        "results/chrom/{chrom}.fasta.fai"
    conda:
        "environment.yml"
    shell: "bedtools makewindows -g {input} -w 10000000 > {output}"


rule chrom_fai:
    output:
        "results/chrom/{chrom}.fasta.fai"
    input:
        "results/chrom/{chrom}.fasta"
    conda:
        "environment.yml"
    shell: "samtools faidx {input}"


rule chrom_fasta:
    output:
        "results/chrom/{chrom,[A-Za-z0-9]+}.fasta"
    input:
        gefa = "results/genome.fasta",
        fafai = "results/genome.fasta.fai"
    conda:
        "environment.yml"
    shell: "samtools faidx {input.gefa} {wildcards.chrom} > {output}"


rule genome_fai:
    output:
        gefa = "results/genome.fasta",
        fafai = "results/genome.fasta.fai"
    input:
        config['genomeFasta']
    conda:
        "environment.yml"
    shell:
        """
        ln -s {input} {output.gefa}
        samtools faidx {output.gefa}
        """
