configfile: "config.yml"

LG = ["1R", "2R", "3R", "4R", "5R", "6R", "7R", "Un"]
CHROM = ["chr1R", "chr2R", "chr3R", "chr4R", "chr5R", "chr6R", "chr7R", "chrUn"]

onsuccess:
    print("Workflow finished with no error")

onstart:
    print("##### ClariTE annotation Workflow #####\n") 
    print("## Creating output folders ##\n")
    shell('mkdir -p logs')
    shell('mkdir -p logs/{wildcards.lg}')
    shell('mkdir -p results')
    shell('mkdir -p results/{wildcards.lg}')


rule all:
    input:
        "results/"+config['TeIDsPrefix']+"clariTE.gff3"


rule merge_chrom_gff3:
    output:
        "results/"+config['TeIDsPrefix']+"clariTE.gff3"
    input:
        expand("results/{lg}/{chrom}_clariTE.gff3", chrom=CHROM, lg=LG)
    log:
        err="logs/"+config['TeIDsPrefix']+"gt_gff3_tidy.err"
    conda:
        "environment.yml"
    shell: "gt gff3 -sort -tidy -retainids {input} 1> {output} 2> {log.err}" 


rule check_gff3:
    output:
        "results/{lg}/{chrom}_gff3validator.log"
    input:
        "results/{lg}/{chrom}_clariTE.gff3"
    log:
        "logs/{lg}/{chrom}_gt_gff3validator.err"
    conda:
        "environment.yml"
    shell:
        """
        gt gff3validator {input} 1> {output} 2> {log}
        """


rule embl_to_gff3:
    output:
        "results/{lg}/{chrom}_clariTE.gff3"
    input:
        EMBL = glob_wildcards("results/{lg}/{chrom}:{id}.fa.out_anno.embl"),
        FASTA = config['genomeFasta'],
        EMBLl="results/{lg}/{chrom}_chunks_embl_list.txt"
    params:
        config['TeIDsPrefix']
    conda:
        "environment.yml"
    shell:
        """
        bin/embl_to_gff3.sh {wildcards.chrom} {input.FASTA} {params}
        """


rule clariTE:
    output:
        EMBL = glob_wildcards("results/{lg}/{chrom}:{id}.fa.out_anno.embl"),
        EMBLl="results/{lg}/{chrom}_chunks_embl_list.txt"
    input:
        fasta = glob_wildcards("results/{lg}/{chrom}:{id}.fa"),
        XM = glob_wildcards("results/{lg}/{chrom}:{id}.fa.out.xm"),
        XMl = "results/{lg}/{chrom}_chunks_xm_list.txt"
    conda: "perl-bioperl=1.7"
    shell:
        """
        sed -i 's/#Unspecified/#Unknown/' {input.xm}
        bin/clariTE_1.0/bin/clariTE.pl -dir results/{lg}/ -LTR bin/CLARIwheat.LTR_position -classi bin/CLARIwheat.classification -fasta {input.fasta} {input.XM}
        sed 's/fa.out.xm/fa.out_anno.embl/g' {input.XMl} > {output.EMBLl}
        """


rule repeatmasker:
    output:
        XM = glob_wildcards("results/{lg}/{chrom}:{id}.fa.out.xm"),
        XMl = "results/{lg}/{chrom}_chunks_xm_list.txt"
    input:
        ID = glob_wildcards("results/{lg}/{chrom}:{id}.fa"),
        IDl = "results/{lg}/{chrom}_chunks_fa_list.txt"
    threads: 16
    conda:
        "environment.yml"
    shell:
        """
        RepeatMasker -e crossmatch -lib config['clariTElib'] -xsmall -nolow -xm -pa {threads} -q {input}
        rm {input}.cat {input}.log {input}.masked {input}.ori.out {input}.out {input}.tbl
        sed 's/fa/fa.out.xm/g' {input.IDl} > {output.XMl}
        """


rule chunks_fasta:
    output:
        ID= glob_wildcards("results/{lg}/{chrom}:{id}.fa"),
        IDl = "results/{lg}/{chrom}_chunks_fa_list.txt"
    input: 
        "results/{lg}/{chrom}.windows.fasta"
    conda:
        "environment.yml"
    shell:
        """
        fastaexplode -f {input} -d results/{wildcards.lg}
        fgrep '>' {input} |sed 's/>//' |tr '\n' ' ' |sed 's/ /.fa /g' > {output.IDl}
        """


rule chunks_multi_fasta:
    output:
        "results/{lg}/{chrom}.windows.fasta"
    input:
        bed="results/{lg}/{chrom}.windows.bed",
        fasta="results/{lg}/{chrom}.fasta"
    conda:
        "environment.yml"
    shell: "bedtools getfasta -bed {input.bed} -fi {input.fasta} > {output}"


rule chunks_bed:
    output:
        "results/{lg}/{chrom}.windows.bed"
    input:
        "results/{lg}/{chrom}.fasta.fai"
    conda:
        "environment.yml"
    shell: "bedtools makewindows -g {input} -w 10000000 > {output}"


rule chrom_fai:
    output:
        "results/{lg}/{chrom}.fasta.fai"
    input:
        "results/{lg}/{chrom}.fasta"
    conda:
        "environment.yml"
    shell: "samtools faidx {input}"


rule chrom_fasta:
    output:
        "results/{lg}/{chrom,[A-Za-z0-9]+}.fasta"
    input:
        gefa = config["genomeFasta"],
        fefai = config["genomeFasta"]+".fai"
    conda:
        "environment.yml"
    shell: "samtools faidx {input} {wildcards.chrom} > {output}"


rule genome_fai:
    output:
        config["genomeFasta"]+".fai"
    input:
        config["genomeFasta"]
    conda:
        "environment.yml"
    shell: "samtools faidx {input}"
