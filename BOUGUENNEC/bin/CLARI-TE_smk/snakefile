configfile: "config.yml"
print("Config is: ", config)

CHROM = config['chromList']

wildcard_constraints:
    chrom="[A-Za-z0-9]+"

onsuccess:
    print("Workflow finished with no error")

onstart:
    print("##### ClariTE annotation Workflow #####\n") 
    print("## Creating output folders ##\n")
    shell('mkdir -p logs/chrom')
    shell('mkdir -p results/chrom')

rule all:
    input:
        "results/"+config['TeIDsPrefix']+"clariTE.gff3",
        "reports/dag.dot",
        "reports/rulegraph.dot"


rule merge_chrom_gff3:
    output:
        "results/"+config['TeIDsPrefix']+"clariTE.gff3"
    input:
        LOG = expand("results/chrom/{chrom}_gff3validator.log", chrom=CHROM),
        GFF = expand("results/chrom/{chrom}_clariTE.gff3", chrom=CHROM)
    log:
        err="logs/"+config['TeIDsPrefix']+"gt_gff3_tidy.err"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="01:00:00"
    shell: "gt gff3 -sort -tidy -retainids {input.GFF} 1> {output} 2> {log.err}" 


rule check_gff3:
    output:
        "results/chrom/{chrom}_gff3validator.log"
    input:
        "results/chrom/{chrom}_clariTE.gff3"
    log:
        "logs/chrom/{chrom}_gt_gff3validator.err"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="00:20:00"
    shell: "gt gff3validator {input} 1> {output} 2> {log}"


# input function for next rule, return paths list to all files produced by the checkpoint 'chunks_fasta'
def embl_list(wildcards):
    checkpoint_output = checkpoints.chunks_fasta.get(**wildcards).output[0]
    return expand("results/chrom/{chrom}/{i}.fa.out_anno.embl", chrom=wildcards.chrom, i=glob_wildcards(os.path.join(checkpoint_output, "{i}.fa")).i)


## verifier si $3 et $embl_files fonctionne bien avec embl2gff.pl dans embl_to_gff.sh
rule embl_to_gff3:
    output:
        "results/chrom/{chrom}_clariTE.gff3"
    input:
        embl_list
    params:
        config['TeIDsPrefix']
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="01:00:00"
    shell:
        """
        embl_to_gff3.sh {wildcards.chrom} {params} {input}
        """


rule clariTE:
    output:
        EMBL = "results/chrom/{chrom}/{i}.fa.out_anno.embl"
    input:
        fasta = "results/chrom/{chrom}/{i}.fa",
        XM = "results/chrom/{chrom}/{i}.fa.out.xm"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="01:00:00",
        mem=16000
    shell:
        """
        sed -i 's/#Unspecified/#Unknown/' {input.XM}
        bin/clariTE_1.0/clariTE.pl -dir results/chrom/ -LTR bin/clariTE_1.0/CLARIwheat.LTR_position -classi bin/clariTE_1.0/CLARIwheat.classification -fasta {input.fasta} {input.XM}
        """


rule repeatmasker:
    output:
        XM = "results/chrom/{chrom}/{i}.fa.out.xm"
    input:
        fasta = "results/chrom/{chrom}/{i}.fa"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="12:00:00",
        mem=16000,
        cpu=16
    threads: 16
    params:
        config['clariTElib']
    shell:
        """
        cd results/chrom/{wildcards.chrom}
        RepeatMasker -e crossmatch -lib ../../../{params} -xsmall -nolow -xm -pa {threads} -q $(basename {input.fasta})
        cd ../../../
        rm {input.fasta}.cat {input.fasta}.masked {input.fasta}.ori.out {input.fasta}.out {input.fasta}.tbl {input.fasta}.log
        """


rule smk_graphs:
	output:
        dag='reports/dag.dot',
        rulegraph='reports/rulegraph.dot'
	shell:
		"""
		snakemake --dag > {output.dag}
		snakemake --rulegraph > {output.rulegraph}
		"""


checkpoint chunks_fasta:
    output:
        directory("results/chrom/{chrom}/")
    input: 
        "results/chrom/{chrom}.windows.fasta"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="00:30:00"
    shell:
        """
        mkdir results/chrom/{wildcards.chrom}
        fastaexplode -f {input} -d results/chrom/{wildcards.chrom}
        """


rule chunks_multi_fasta:
    output:
        "results/chrom/{chrom}.windows.fasta"
    input:
        bed="results/chrom/{chrom}.windows.bed",
        fasta="results/chrom/{chrom}.fasta"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="00:30:00"
    shell: "bedtools getfasta -bed {input.bed} -fi {input.fasta} > {output}"


rule chunks_bed:
    output:
        "results/chrom/{chrom}.windows.bed"
    input:
        "results/chrom/{chrom}.fasta.fai"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="00:30:00"
    shell: "bedtools makewindows -g {input} -w 10000000 > {output}"


rule chrom_fai:
    output:
        "results/chrom/{chrom}.fasta.fai"
    input:
        "results/chrom/{chrom}.fasta"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="00:10:00"
    shell: "samtools faidx {input}"


rule chrom_fasta:
    output:
        "results/chrom/{chrom}.fasta"
    input:
        gefa = "results/genome.fasta",
        fafai = "results/genome.fasta.fai"
    singularity:
        "singularity_RMclariTE.sif"
    resources:
        runtime="00:10:00"
    shell: "samtools faidx {input.gefa} {wildcards.chrom} > {output}"


rule genome_fai:
    output:
        gefa = "results/genome.fasta",
        fafai = "results/genome.fasta.fai"
    input:
        config['genomeFasta']
    singularity:
        "singularity_RMclariTE.sif"
    resources: 
        runtime="00:10:00"
    shell: 
        """
        ln -s {input} {output.gefa}
        samtools faidx {output.gefa}
        """
