#!/usr/local/bin/perl -w


#/*****************************************************************************
#   Copyright (C) 1996 by Phil Green.                          
#   All rights reserved.                           
#                                                                           
#   This software is part of a beta-test version of the swat/cross_match/phrap 
#   package.  It should not be redistributed or
#   used for any commercial purpose, including commercially funded
#   sequencing, without written permission from the author and the
#   University of Washington.
#   
#   This software is provided ``AS IS'' and any express or implied
#   warranties, including, but not limited to, the implied warranties of
#   merchantability and fitness for a particular purpose, are disclaimed.
#   In no event shall the authors or the University of Washington be
#   liable for any direct, indirect, incidental, special, exemplary, or
#   consequential damages (including, but not limited to, procurement of
#   substitute goods or services; loss of use, data, or profits; or
#   business interruption) however caused and on any theory of liability,
#   whether in contract, strict liability, or tort (including negligence
#   or otherwise) arising in any way out of the use of this software, even
#   if advised of the possibility of such damage.
#                                                                         
#*****************************************************************************/

use strict;
use Tk;
#phrapview version 0.960731

#runtime changeable parameters
my ($LLR_cutoff, $unalign_cutoff) = (0, 50);
my ($min_opp_displace, $max_opp_displace, $min_same_displace, $max_same_displace) = (0, 5000, 0, 1000);
my ($qual_cut) = (25);
my ($horiz_mag, $spacing_mag, $depth_scale_mag, $qual_scale_mag) = (100, 100, 100, 100);

#hardwired parameters
my ($horiz_scale_factor, $contig_spacing, $depth_scale_factor, $qual_scale_factor) = (1 / 50, 50, 1, 1);
my ($font, $text_color) = ('-*-Courier-Bold-R-Normal-*-14-*-*-*-*-*-*', 'black');
my ($ok_color, $grayzone_color, $problem_color, $select_color) = ('black', 'blue', 'red', 'yellow');
my ($contig_color, $unalign_color, $chimera_color) = ('black', 'green', $ok_color);
my ($depth_color, $depth_scale_color) = ('yellow', 'orange');
my ($discrep_color, $qual_color, $qual_scale_color) = ($grayzone_color, $grayzone_color, 'green');
my $required_format = "FORMAT1";

#computed or read-in parameters
my (@reads, %reads, @contigs, @chimeras, %contigs, @matches, %clones, @chimera_matches, @contig_matches, @clone_links, @chimeric_reads, @neg_reads, @match_reads, %contig_positions);
my (%contig_quals, %discrep_quals);
my (%top_depths, %bottom_depths, %reduced_top_depths, %reduced_bottom_depths, %reduced_depths, %zero_depths);

my ($data_filename, $num_reads, $num_duplicates, $num_singlets, $num_contig_reads, $num_contigs, $num_chimeras);
my $format;
die("FATAL ERROR: Must enter unique filename for a .view file on command line\n") if $#ARGV;
my $input_filename = $ARGV[0];

print STDERR "Reading ... ";
while (<>) {
    chop;
    my ($tag, $rest) = split(' ', $_, 2);

    if ($tag eq 'MATCH') {
	push(@matches, $rest);
    }
    elsif ($tag eq 'HEADER') {
	($format, $data_filename, $num_reads, $num_duplicates, $num_singlets, $num_contig_reads, $num_contigs) = split(' ', $rest);
	die "\nFATAL ERROR: .view file $format does not have phrapview required format $required_format; \nrerun phrap and/or phrapview using current versions\n" if $format ne $required_format;
    }
    else {
	my ($name, $rest2) = split(' ', $rest, 2);

	if ($tag eq 'READ') {
	    $reads{$name} = $rest2;
	    push(@reads, $name);
	}
	elsif ($tag eq 'CONTIG') {
	    $contigs{$name} = $rest2;
	    unshift(@contigs, $name);
	}			# 
	elsif ($tag eq 'CONTIG_QUAL') {
	    $contig_quals{$name} = $rest2;
	}
	elsif ($tag eq 'DISCREP_QUAL') {
	    $discrep_quals{$name} = $rest2;
	}
    }
}
die "FATAL ERROR: No reads or contigs.\n" if $#contigs < 0 || $#reads < 0;				
print STDERR " Done\n";
print STDERR "Clones/Contigs/Chimeras ...";

my $read;
foreach $read (@reads) {
    my ($clone) = split('\.', $read);
    $clones{$clone} = $clones{$clone} ? $clones{$clone} . " $read" : $read;
    my (@rest) = split(' ', $reads{$read});
    next if $#rest < 6;
    push(@neg_reads, $read) if $rest[1] <= 0;
    my $i = 4;
    while ($i <= $#rest) {
	my $contig = $rest[$i];
	if ($i > 4) {
	    push(@chimeras, $contig);
	    $contigs{$contig} = $rest[0];
	    push(@matches, "100.0 $read $rest[2] $rest[3]  $read $rest[2] $rest[3] 1 0 0");
	    push(@chimeric_reads, $read);
	} 
	$contigs{$contig} .= " $read";
	$i += 3;
    }			 
}

my $num_chimeras = $#chimeras + 1;
print STDERR " Done\n";

print STDERR "Layout ...";

my $main = new MainWindow;
my $frametop = $main->Frame;
my $frame = $frametop->Frame;
my $frame1 = $frame->Frame;
#$main->title($filename);
$main->title("Phrapview: phrap assembly of $data_filename");
$frametop->pack(-expand => 'yes', -fill => 'both');

my $frame1 = $frame->Frame;

$frame1->Label(-text => "$num_reads reads total:\n $num_contig_reads in $num_contigs contigs;\n $num_duplicates exact duplicates;\n $num_singlets singletons.\n $num_chimeras chimeras.", -relief => 'flat', -justify => 'left', -font => $font)->pack(-side => 'left');

my $info1a = $frame1->Label(-font => $font, -justify => 'left', -relief => 'sunken');

$info1a->pack(-side => 'left');

my $info1b = $frame1->Label(-font => $font, -justify => 'left', -relief => 'sunken');

$info1b->pack(-side => 'left');

my $info2 = $frame1->Label(-font => $font, -justify => 'left', -relief => 'sunken');

$info2->pack(-side => 'left');


my $canvas = $frame->Canvas;

#my $scale = $frame->Scale( -variable => $x, -orient => 'horizontal', -command => sub{&drawlines});


my $scrollx = $frame->Scrollbar(-orient => 'horiz', -command => ['xview', $canvas]);
my $scrolly = $frametop->Scrollbar(-orient => 'vert', -command => ['yview', $canvas]);
$scrollx->pack(-side => 'bottom', -fill => 'x');
$scrolly->pack(-side => 'right', -fill => 'y');

$canvas->configure(-relief => 'raised', -borderwidth => 1, -xscrollcommand => ['set', $scrollx], -yscrollcommand => ['set', $scrolly]);

$frame->pack(-expand => 'yes', -fill => 'both', -side => 'left');
$frame1->pack(-expand => 'no', -fill => 'x');



$canvas->pack(-expand => 'yes', -fill => 'both');
my $frame2 = $frame->Frame;
$frame2->pack(-expand => 'no', -fill => 'x');
my $frame21 = $frame2->Frame;
$frame21->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame22 = $frame2->Frame;
$frame22->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame23 = $frame2->Frame;
$frame23->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame24 = $frame2->Frame;
$frame24->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame25 = $frame2->Frame;
$frame25->pack(-expand => 'no', -fill => 'x', -side => 'left');

$frame21->Button(-text => 'Show Depths        ', -width => 19,
				   -command => sub{&draw_contig_depths(0)}, -font => $font)->pack;
$frame21->Button(-text => 'Show Reduced Depths', -width => 19,
				   -command => sub{&draw_contig_depths(1)}, -font => $font)->pack;

$frame22->Button(-text => 'Show Contig Matches ', -width => 20,
				   -command => sub{&draw_contig_matches}, -font => $font)->pack;
$frame22->Button(-text => 'Show Chimera Matches', -width => 20,
				   -command => sub{&draw_chimera_matches}, -font => $font)->pack;
$frame23->Button(-text => 'Show Fwd-Rev Links    ', -width => 22,
				   -command => sub{&draw_clone_links('Fwd-Rev')}, -font => $font)->pack;
$frame23->Button(-text => 'Show Same-Strand Links', -width => 22,
				   -command => sub{&draw_clone_links('Same-Strand')}, -font => $font)->pack;
$frame24->Button(-text => 'Show Quality', -width => 13, -command => sub{&draw_quals}, -font => $font)->pack;
$frame24->Button(-text => 'Clear Display', -width => 13,
				   -command => sub{&reset_display}, -font => $font)->pack;


my $frame3 = $frame->Frame;
$frame3->pack(-expand => 'no', -fill => 'x');
my $frame41 = $frame3->Frame;
$frame41->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame42 = $frame3->Frame;
$frame42->pack(-expand => 'no', -fill => 'x', -side => 'left');

$frame41->Label(-text => 'Horiz mag:  ', -justify => 'left', -font => $font)->pack;
$frame42->Entry(-width => 4, -textvariable => \$horiz_mag)->pack;

$frame41->Label(-text => 'Spacing mag:', -justify => 'left', -font => $font)->pack;
$frame42->Entry(-width => 4, -textvariable => \$spacing_mag)->pack;

$frame41->Label(-text => 'Depth mag:  ', -justify => 'left', -font => $font)->pack;
$frame42->Entry(-width => 4, -textvariable => \$depth_scale_mag)->pack;

$frame41->Label(-text => 'Qual mag:   ', -justify => 'left', -font => $font)->pack;
$frame42->Entry(-width => 4, -textvariable => \$qual_scale_mag)->pack;


my $frame31 = $frame3->Frame;
$frame31->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame32 = $frame3->Frame;
$frame32->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame33 = $frame3->Frame;
$frame33->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame34 = $frame3->Frame;
$frame34->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame35 = $frame3->Frame;
$frame35->pack(-expand => 'no', -fill => 'x', -side => 'left');
my $frame36 = $frame3->Frame;
$frame36->pack(-expand => 'no', -fill => 'x', -side => 'left');

$frame31->Label(-text => ' min LLR:    ', -justify => 'left', -font => $font)->pack;
$frame32->Entry(-width => 5, -textvariable => \$LLR_cutoff)->pack;

$frame31->Label(-text => ' max unalign:', -justify => 'left', -font => $font)->pack;
$frame32->Entry(-width => 5, -textvariable => \$unalign_cutoff)->pack;

$frame31->Label(-text => ' qual cutoff:', -justify => 'left', -font => $font)->pack;
$frame32->Entry(-width => 5, -textvariable => \$qual_cut)->pack;

$frame33->Label(-text => ' min fwd-rev:', -justify => 'left', -font => $font)->pack;
$frame34->Entry(-width => 6, -textvariable => \$min_opp_displace)->pack;

$frame33->Label(-text => ' max fwd-rev:', -justify => 'left', -font => $font)->pack;
$frame34->Entry(-width => 6, -textvariable => \$max_opp_displace)->pack;

$frame33->Label(-text => ' min ss:     ', -justify => 'left', -font => $font)->pack;
$frame34->Entry(-width => 6, -textvariable => \$min_same_displace)->pack;

$frame33->Label(-text => ' max ss:     ', -justify => 'left', -font => $font)->pack;
$frame34->Entry(-width => 6, -textvariable => \$max_same_displace)->pack;
$frame35->Label(-text => '            ', -justify => 'left', -font => $font)->pack;

$frame36->Button(-text => 'Quit', -width => 4, -command => sub{exit}, -font => $font)->pack(-side => 'left');


#$displace_entry->configure(-relief => 'flat', -state => 'disabled');

$canvas->bind('contig_match', '<Any-Enter>' => sub {&highlight_selected}, );
$canvas->bind('chimera_match', '<Any-Enter>' => sub {&highlight_selected}, );
$canvas->bind('Fwd-Rev', '<Any-Enter>' => sub {&highlight_selected}, );
$canvas->bind('Same-Strand', '<Any-Enter>' => sub {&highlight_selected}, );
$canvas->bind('qual', '<Any-Enter>' => sub {&highlight_selected}, );
$canvas->bind('depth', '<Any-Enter>' => sub {&highlight_selected}, );
$canvas->bind('contig', '<Any-Enter>' => sub {&unselect}, );

#$canvas->bind('temporary', '<Button-1>' => sub {remove_temps($canvas);}, );
#$canvas->bind('curve', '<Any-Enter>' => [sub{shift->itemconfigure(@_)}, 'current', -fill => $select_color]);
print STDERR " Done\n";


print STDERR "Drawing contigs ...";

my ($x_start, $max_x);
my ($first_y, $min_y, $max_y);

my ($last_contig_LLR_cutoff, $last_contig_unalign_cutoff);
my ($last_chimera_LLR_cutoff, $last_chimera_unalign_cutoff);
my ($last_min_opp_displace, $last_max_opp_displace, $last_min_same_displace, $last_max_same_displace);
my $last_qual_cut;
my ($last_horiz_mag, $last_spacing_mag, $last_depth_scale_mag, $last_qual_scale_mag);

my ($last_LLR, $clones_flag, $depths_flag) = (1000,0,0);
my ($contig_match_tag, $chimera_match_tag, $fwd_rev_tag, $ss_tag, $qual_tag, $reduced_depth_tag, $depth_tag, $unalign_tag);

&reset_display;
&draw_contigs;
&unselect;

&process_matches;
&process_depths;
&process_clones;
print STDERR " Done\n";

MainLoop;

sub process_matches {
    return if $last_LLR <= $LLR_cutoff;
    print STDERR "Matches ...";
    foreach (@matches) {
	my ($score, $read1, $start1, $end1, $read2, $start2, $end2, $distant, $unalign) = split;
	next if $score < $LLR_cutoff || $score >= $last_LLR;
	my ($contig1, $s_pos1, $e_pos1, $chim_state1, $unalign1) = 
	    &locate(0, $read1, $start1, $end1);
	my ($contig2, $s_pos2, $e_pos2, $chim_state2, $unalign2) = 
	    &locate($score == 100.0, $read2, $start2, $end2);
	$unalign1 = $unalign2 if $unalign1 < $unalign2;
	if ($chim_state1 || $chim_state2) {
	    push(@chimera_matches, "$score $unalign1 $contig1 $s_pos1 $e_pos1 $contig2 $s_pos2 $e_pos2 $read1 $read2");
	}
	else {
	    push(@contig_matches, "$score $unalign1 $distant $contig1 $s_pos1 $e_pos1 $contig2 $s_pos2 $e_pos2 $read1 $read2");
	    if ($score >= $LLR_cutoff && $distant) {
		push(@match_reads, ($read1, $read2));
	    }
	}				# 
    }
    $last_LLR = $LLR_cutoff;
    print STDERR " Done\n";
}

sub process_clones {
    return if $clones_flag;
    print STDERR "Clones ...";

    foreach (keys %clones) {
	my (@c_reads) = split(' ', $clones{$_});
	next if !($#c_reads);
	my ($i, $j);
	foreach $i (1..$#c_reads) {
	    my $read1 = $c_reads[$i];
	    my @read_vals = split(' ', $reads{$read1});
	    next if $#read_vals < 6;
	    my ($r_length1, $llr_score1, $r_start1, $r_end1, $contig1, $c_start1, $c_end1) = @read_vals[0..6];
	    my ($prefix, $suffix1) = split('\.', $read1);
	    
	    my ($length1) = split(' ', $contigs{$contig1});
	    foreach $j (0..$i - 1) {
		my $read2 = $c_reads[$j];
		@read_vals = split(' ', $reads{$read2});
		next if $#read_vals < 6;
		my ($r_length2, $llr_score2, $r_start2, $r_end2, $contig2, $c_start2, $c_end2) = @read_vals[0..6];
		my ($prefix, $suffix2) = split('\.', $read2);
		my ($length2) = split(' ', $contigs{$contig2});

		my ($type1, $type2) = (substr($suffix1, 0, 1), substr($suffix2, 0, 1));
		$type1 =~ tr/xy/sr/;
		$type2 =~ tr/xy/sr/;
		my $type = $type1 ne $type2;
		my $reverse = ($c_end1 > $c_start1) != ($c_end2 > $c_start2);
		my $dist1 = $c_end1 > $c_start1 ? $length1 - $c_start1 : $c_start1 + 1;
		my $dist2 = $c_end2 > $c_start2 ? $length2 - $c_start2 : $c_start2 + 1;
		my $displace;

		if ($type) {
		    if ($contig1 eq $contig2) {
			if ($reverse) {
			    $displace = $dist1 + $dist2 - $length1;
			}
			else {
			    $displace = $c_start1 > $c_start2 ? 
				$c_start1 - $c_start2 : $c_start2 - $c_start1;
			}
		    }
		    else {
			$displace = $dist1 + $dist2;
		    }
		}
		else {
		    if ($contig1 eq $contig2) {
			$displace = $c_start1 > $c_start2 ? 
			    $c_start1 - $c_start2 : $c_start2 - $c_start1;
		    }
		    else {
			$displace = $dist1 + $length2 - $dist2;
			$displace = $dist2 + $length1 - $dist1 if $displace > $dist2 + $length1 - $dist1;
		    }
		}
		my $problem = $type != $reverse && $contig1 eq $contig2 ? 1 : 0;
		my $arrow = $type != $reverse ? 'both' : 'none';
		$type = $type ? 'Fwd-Rev' : 'Same-Strand';
		if ($problem) {
		    push(@clone_links,"$type $problem $arrow $displace $contig1 $c_start1 $c_end1 $contig2 $c_start2 $c_end2 $read1 $read2");
		}
		else {
		    unshift(@clone_links,"$type $problem $arrow $displace $contig1 $c_start1 $c_end1 $contig2 $c_start2 $c_end2 $read1 $read2");
		}
	    }			# 
	}				# 
    }				# 
    $clones_flag = 1;
    print STDERR " Done\n";
}

sub process_depths {
    return if $depths_flag;

    print STDERR "Contig depths ...";

    my $contig;
    foreach $contig (@contigs) {
	my ($length, @c_reads) = split(' ', $contigs{$contig});
	my (@top_depths, @bottom_depths);    
	foreach (@c_reads) {
	    my ($r_length, $llr_score, $r_start, $r_end, $c_name, $c_start, $c_end) = split(' ', $reads{$_});
	    $c_start < $c_end ? ($top_depths[$c_start]++, $top_depths[$c_end + 1]--) 
		: ($bottom_depths[$c_end]++, $bottom_depths[$c_start + 1]--);
	}	
	$top_depths{$contig} = find_cum($length, @top_depths);
	$bottom_depths{$contig} = find_cum($length, @bottom_depths);

	my %mark;
	grep($mark{$_}++, @chimeric_reads, @neg_reads, @match_reads);
	@c_reads = grep(!$mark{$_}, @c_reads);

	my (@reduced_top_depths, @reduced_bottom_depths);    
	foreach (@c_reads) {
	    my ($r_length, $llr_score, $r_start, $r_end, $c_name, $c_start, $c_end) = split(' ', $reads{$_});
	    $c_start < $c_end ? ($reduced_top_depths[$c_start]++, $reduced_top_depths[$c_end + 1]--) 
		: ($reduced_bottom_depths[$c_end]++, $reduced_bottom_depths[$c_start + 1]--);
	}	

	$reduced_top_depths{$contig} = find_cum($length, @reduced_top_depths);
	$reduced_bottom_depths{$contig} = find_cum($length, @reduced_bottom_depths);

	my @reduced_depths;    
	foreach (@c_reads) {
	    my ($r_length, $llr_score, $r_start, $r_end, $c_name, $c_start, $c_end) = split(' ', $reads{$_});
	    $c_start < $c_end ? ($reduced_depths[$c_start]++, $reduced_depths[$c_end + 1]--) 
		: ($reduced_depths[$c_end]++, $reduced_depths[$c_start + 1]--);
	}	
	$reduced_depths{$contig} = find_cum($length, @reduced_depths);
	$zero_depths{$contig} = find_zer($reduced_depths{$contig});
    }
    $depths_flag = 1;
    print STDERR " Done\n";
}

sub locate {
    my ($chim_flag, $read, $r_pos1, $r_pos2) = @_;
    my @rest = split(' ', $reads{$read});
    my ($length, $llr_score, $r_start, $r_end, $contig, $c_start, $c_end) = @rest[0..6];
    my $i = 7;
    while ($i < $#rest) { 
	my ($chim_name, $chimera_start, $chimera_end) = @rest[$i..$i + 2];
	if ($chim_flag || $r_pos1 <= $chimera_end && $r_pos1 >= $chimera_start
	    && $r_pos2 <= $chimera_end && $r_pos2 >= $chimera_start) {
	    return ($chim_name, $r_pos1, $r_pos2, 'chimeric', 0);
	}
	$i += 3;
    }
    my $r_len = $r_end - $r_start;
    $r_len = 1 if $r_len == 0;
    my $c_pos1 = int($c_start + ($c_end - $c_start) * ($r_pos1 - $r_start) / $r_len); 
    my $c_pos2 = int($c_start + ($c_end - $c_start) * ($r_pos2 - $r_start) / $r_len); 
     
    my $unalign = 0;
    foreach ($r_start - $r_pos1, $r_start - $r_pos2, $r_pos1 - $r_end, $r_pos2 - $r_end) {
	$unalign = $_ if $_ > $unalign;
    }
    return ($contig, $c_pos1, $c_pos2, '', $unalign);
}


sub find_cum {
    my ($length, @depths) = @_;
    my $i;
    my $cum = $depths[0];
    $cum = 0 if !$cum;
    my $depth_list = "0 $cum";
    foreach $i (1..$length - 1) {
	if ($depths[$i]) {
	    $cum += $depths[$i];
	    $depth_list .= " $i $cum";
	}
    }
    $depth_list .= " $length 0";
    return $depth_list;
}

sub find_zer {
    my ($depth_list) = @_;
    my @depths = split(' ', $depth_list);
    my $zer_list = "";
    my $i;
    for ($i = 2; $i < $#depths; $i += 2) {
	if (!$depths[$i - 1]) {
	    $zer_list .= join(' ', $depths[$i - 2], $depths[$i] - 1, " ");
	}
    }
    return $zer_list;
}


sub position_contigs {
    my $contig;
    my $y = $first_y;			# 
    my $x_scale = $horiz_scale_factor * $horiz_mag / 100;
    my $spacing = $contig_spacing * $spacing_mag / 100;
    foreach $contig (@contigs) {
	my ($length, @c_reads) = split(' ', $contigs{$contig});
	my $num_reads = $#c_reads + 1;
	my $x_end = $x_start + ($length - 1) * $x_scale;
	$max_x = $x_end if $max_x < $x_end;

	$contig_positions{$contig} = "$x_start $x_end $y $x_scale $length $num_reads";
	$y += $spacing;
    }				# 
    foreach $contig (@chimeras) {
	my ($length) = split(' ', $contigs{$contig});

	my $x_end = $x_start + ($length - 1) * $x_scale;
	$max_x = $x_end if $max_x < $x_end;

	$contig_positions{$contig} = "$x_start $x_end $y $x_scale $length 0";
	$y += .5 * $spacing;
    }				# 
    $max_y = $y;
}

sub draw_contigs {
    return if $horiz_mag == $last_horiz_mag && $spacing_mag == $last_spacing_mag;
    &reset_display;
    &position_contigs;
    my $contig;
    foreach $contig (@contigs, @chimeras) {
	my ($x_start, $x_end, $y, $x_scale, $length, $num_reads) = split(' ', $contig_positions{$contig});

	my $obj = $canvas->create('line', $x_start, $y, $x_end,  $y, -width => 1, -fill => $contig_color);
	$canvas->addtag('contig','withtag',$obj);
	$obj = $canvas->create('text', 5, $y, -fill => $text_color, -text => $contig, -anchor => 'w', -font => $font);
	$canvas->addtag('contig','withtag',$obj);
	$obj = $canvas->create('text', $x_end + 10, $y, -fill => $text_color, -text => "$length bp", -anchor => 'w', -font => $font);
	$canvas->addtag('contig','withtag',$obj);
	if ($num_reads) {	# 
	    $obj = $canvas->create('text', 5, $y + 15, -fill => $text_color, -text => "($num_reads read" . ($num_reads > 1 ? "s)" : ") "), -anchor => 'w', -font => $font);
	    $canvas->addtag('contig','withtag',$obj);
	}
    }				# 
    $last_horiz_mag = $horiz_mag;
    $last_spacing_mag = $spacing_mag;
    $canvas->configure(-scrollregion => [0, $min_y, $max_x + 100, $max_y]);
}

sub draw_contig_depths {
    &draw_contigs;
    my ($reduce_flag) = @_;
    return if ($last_depth_scale_mag == $depth_scale_mag && ($reduce_flag && $reduced_depth_tag || !$reduce_flag && $depth_tag));
    &process_depths;
    if ($last_depth_scale_mag != $depth_scale_mag) {
	$canvas->delete('depth');
	$canvas->delete('depth_scale');
	$depth_tag = $reduced_depth_tag = "";
    }
    my $contig;
    foreach $contig (@contigs) {
	my ($x_start, $x_end, $y, $x_scale, $length, $num_reads) = split(' ', $contig_positions{$contig});
	my ($i, $depth);
	my $depth_factor = $depth_scale_factor *$depth_scale_mag / 100;
	my $y_depth = 10 * $depth_factor;
	$depth = $canvas->create('line', $x_start, $y + $y_depth, $x_end,
			$y + $y_depth, -width => 1, -fill => $depth_scale_color);
	$canvas->addtag('depth_scale','withtag',$depth);

	$depth = $canvas->create('line', $x_start, $y - $y_depth, $x_end,
			$y - $y_depth, -width => 1, -fill => $depth_scale_color);    

	$canvas->addtag('depth_scale','withtag',$depth);

	my @top_depths = split(' ', $reduce_flag ? $reduced_top_depths{$contig} : $top_depths{$contig});
	my @bottom_depths = split(' ', $reduce_flag ? $reduced_bottom_depths{$contig} : $bottom_depths{$contig});
	my ($xpos1, $xpos, $y_depth, $d1, $p1, $p2, $tag, $color);
	for ($i = 2; $i < $#top_depths; $i += 2) {
	    $xpos1 = $x_start + $top_depths[$i - 2] * $x_scale;
	    $xpos = $x_start + ($top_depths[$i] - 1 ) * $x_scale;
	    $y_depth = $y - $depth_factor * $top_depths[$i - 1];
	    $color = $top_depths[$i - 1] ? $depth_color : $problem_color;
	    $depth = $canvas->create('line', $xpos1, $y_depth, $xpos, $y_depth, 
				     -width => 1, -fill => $color);
	    $canvas->addtag('depth','withtag',$depth);
	    $canvas->addtag("COLOR $color",'withtag',$depth);
	    ($d1, $p1, $p2) = ($top_depths[$i - 1], $top_depths[$i - 2] + 1, $top_depths[$i]);
	    $tag = "Top depth\nDepth $d1\nBases $p1 to $p2";
	    $canvas->addtag("TEXT $tag",'withtag',$depth);
	}
	for ($i = 2; $i < $#bottom_depths; $i += 2) {
	    $xpos1 = $x_start + $bottom_depths[$i - 2] * $x_scale;
	    $xpos = $x_start + ($bottom_depths[$i] - 1 ) * $x_scale;
	    $y_depth = $y + $depth_factor * $bottom_depths[$i - 1];
	    $color = $bottom_depths[$i - 1] ? $depth_color : $problem_color;
	    $depth = $canvas->create('line', $xpos1, $y_depth, $xpos, $y_depth, 
				     -width => 1, -fill => $color);
	    $canvas->addtag('depth','withtag',$depth);
	    $canvas->addtag("COLOR $color",'withtag',$depth);
	    ($d1, $p1, $p2) = ($bottom_depths[$i - 1], $bottom_depths[$i - 2] + 1, $bottom_depths[$i]);
	    $tag = "Bottom depth\nDepth $d1\nBases $p1 to $p2";
	    $canvas->addtag("TEXT $tag",'withtag',$depth);
	}			# 
    }				# 
    $last_depth_scale_mag = $depth_scale_mag;
    $reduced_depth_tag = "Reduced depths" if $reduce_flag;
    $depth_tag = "Depths  " if !$reduce_flag;
    &show_info;
}

sub draw_quals {
    &draw_contigs;
    return if ($last_qual_scale_mag == $qual_scale_mag && $last_qual_cut == $qual_cut);
    $canvas->delete('qual');
    $canvas->delete('qual_scale');
    my $contig;
    foreach $contig (@contigs) {
	my ($x_start, $x_end, $y, $x_scale, $length, $num_reads) = split(' ', $contig_positions{$contig});
	my ($i, $qual, $y_depth);
	my $qual_factor = $qual_scale_factor * $qual_scale_mag / 100;
	my $y_depth = $y - $qual_cut * $qual_factor;
	$qual = $canvas->create('line', $x_start, $y_depth, $x_end,
			$y_depth, -width => 1, -fill => $qual_scale_color);
	$canvas->addtag('qual_scale','withtag',$qual);

	my @contig_quals = split(' ', $contig_quals{$contig});
	my @discrep_quals = split(' ', $discrep_quals{$contig});

	foreach $i (0..$#contig_quals) {
	    my $q = $contig_quals[$i];
	    my $xpos;
	    if ($q < $qual_cut) {
		$xpos = $x_start + $i * $x_scale;
		$qual = $canvas->create('line', $xpos, $y - $q * $qual_factor, $xpos, $y_depth, 
					-width => 1, -fill => $qual_color);
		$canvas->addtag('qual','withtag',$qual);
		$canvas->addtag("COLOR $qual_color",'withtag',$qual);
		my $pos = $i + 1;
		my $tag = "Low qual contig base\nContig position $pos\nContig quality $q";
		$canvas->addtag("TEXT $tag",'withtag',$qual);
	    }
	    $q = $discrep_quals[$i];
	    if ($q > $qual_cut) {
		$xpos = $x_start + $i * $x_scale;
		$qual = $canvas->create('line', $xpos, $y - $q * $qual_factor, $xpos, $y_depth, 
					-width => 1, -fill => $discrep_color);
		$canvas->addtag('qual','withtag',$qual);
		$canvas->addtag("COLOR $discrep_color",'withtag',$qual);
		my $pos = $i + 1;
		my $tag = "High qual discrepancy\nContig position $pos\nDiscrepant read quality $q";
		$canvas->addtag("TEXT $tag",'withtag',$qual);
	    }
	}
    }				# 
    $last_qual_scale_mag = $qual_scale_mag;
    $last_qual_cut = $qual_cut;
    $qual_tag = "Qualities";
    &show_info;
}

sub intersect_zero {
    my ($start, $end, $zero_depths) = @_;
    my @zer_segs = split(' ', $zero_depths);
    my $i;
    my $problem = 0;
    for ($i = 0; $i < $#zer_segs; $i += 2) {
	if ($start >= $zer_segs[$i] && $start <= $zer_segs[$i + 1]
		     || $end >= $zer_segs[$i] && $end <= $zer_segs[$i + 1]){
	   $problem = 1;
	   last;
	}
    }
    return $problem;
}

sub draw_contig_matches {
    &draw_contigs;
    return if ($last_contig_LLR_cutoff == $LLR_cutoff && $last_contig_unalign_cutoff == $unalign_cutoff);
    &process_matches;
    &process_depths;
    $canvas->delete('contig_match');
    my ($num_prob_curves, $num_gray_curves) = (0, 0);
    
    foreach (@contig_matches) {
	my ($score, $unalign, $distant, $contig1, $s_pos1, $e_pos1, $contig2, $s_pos2, $e_pos2, $read1, $read2) = split;
	next if $score < $LLR_cutoff || !$distant;
	my $color;
	if (&intersect_zero($s_pos1, $e_pos1, $zero_depths{$contig1}) 
	    || &intersect_zero($s_pos2, $e_pos2, $zero_depths{$contig2})) {
	    $color = $problem_color;
	    $num_prob_curves++;
	}
	else {
	    $color = $unalign > $unalign_cutoff ? $unalign_color : $grayzone_color;
	    $num_gray_curves++;
	}
	my $arrow = $s_pos1 < $e_pos1 != $s_pos2 < $e_pos2 ? 'both' : 'none';
	my $tag = "Contig Match\n$read1 $contig1 $s_pos1 $e_pos1\n$read2 $contig2 $s_pos2 $e_pos2\nLLR score $score, $unalign unaligned";
	&drawcurve('contig_match', $contig1, ($s_pos1 + $e_pos1) / 2, $contig2, ($s_pos2 + $e_pos2) / 2, $color, $arrow, $tag);
    }
    my $num_curves = $num_gray_curves + $num_prob_curves;
    $canvas->configure(-scrollregion => [0, $min_y, $max_x + 100, $max_y]);
    $contig_match_tag = "$num_curves contig matches:\n $num_prob_curves problems, $num_gray_curves grayzone";
    $last_contig_LLR_cutoff = $LLR_cutoff;
    $last_contig_unalign_cutoff = $unalign_cutoff;
    &show_info;
}

sub draw_chimera_matches {
    &draw_contigs;
    return if ($last_chimera_LLR_cutoff == $LLR_cutoff && $last_chimera_unalign_cutoff == $unalign_cutoff);
    &process_matches;
    $canvas->delete('chimera_match');
    my $num_matches = 0;
    foreach (@chimera_matches) {
	my ($score, $unalign, $contig1, $s_pos1, $e_pos1, $contig2, $s_pos2, $e_pos2, $read1, $read2) = split;
	next if ($score <= $LLR_cutoff);
	my $color = $read1 eq $read2 ? $chimera_color : ($unalign > $unalign_cutoff ? $unalign_color : $problem_color);
	my $arrow = $s_pos1 < $e_pos1 != $s_pos2 < $e_pos2 ? 'both' : 'none';
	my $tag = "Chimera Match\n$read1 $contig1 $s_pos1 $e_pos1\n$read2 $contig2 $s_pos2 $e_pos2\nLLR score $score, $unalign unaligned";
	&drawcurve('chimera_match', $contig1, ($s_pos1 + $e_pos1) / 2, $contig2, ($s_pos2 + $e_pos2) / 2, $color, $arrow, $tag);
	$num_matches++;
    }
    $canvas->configure(-scrollregion => [0, $min_y, $max_x + 100, $max_y]);
    $chimera_match_tag = "$num_matches chimera matches";
    $last_chimera_LLR_cutoff = $LLR_cutoff;
    $last_chimera_unalign_cutoff = $unalign_cutoff;
    &show_info;
}

sub draw_clone_links {
    &draw_contigs;
    my ($d_type) = @_;
    if ($d_type eq 'Fwd-Rev') {
	return if ($last_min_opp_displace == $min_opp_displace && $last_max_opp_displace == $max_opp_displace);
	$canvas->delete('Fwd-Rev');
    }
    elsif ($d_type eq 'Same-Strand') {
	return if ($last_min_same_displace == $min_same_displace && $last_max_same_displace == $max_same_displace);
	$canvas->delete('Same-Strand');
    }
    &process_clones;
    my ($num_prob_curves, $num_ok_curves) = (0, 0);
    foreach (@clone_links) {
	my ($type, $problem, $arrow, $displace, $contig1, $s_pos1, $e_pos1, $contig2, $s_pos2, $e_pos2, $read1, $read2) = split;
	next if $type ne $d_type;
	if (!$problem) {
	    $problem = 1 if $type eq 'Fwd-Rev' && ($displace < $min_opp_displace || $displace > $max_opp_displace);
	    
	    $problem = 1 if $type eq 'Same-Strand' && ($displace < $min_same_displace || $displace > $max_same_displace); 
	}
	my $color = $problem ? $problem_color : $ok_color;
	my $tag = "$type Link\n$read1 $contig1 $s_pos1 $e_pos1\n$read2 $contig2 $s_pos2 $e_pos2\nOffset: $displace";
	&drawcurve($type, $contig1, $s_pos1, $contig2, $s_pos2, $color, $arrow, $tag);
	$problem ? $num_prob_curves++ : $num_ok_curves++;
    }
    my $num_curves = $num_prob_curves + $num_ok_curves;
    $canvas->configure(-scrollregion => [0, $min_y, $max_x + 100, $max_y]);
    my $current_info = "$num_curves $d_type links:\n $num_prob_curves problems, $num_ok_curves ok";
    if ($d_type eq 'Fwd-Rev') {
	$last_min_opp_displace = $min_opp_displace;
	$last_max_opp_displace = $max_opp_displace;
	$fwd_rev_tag = $current_info;
    }
    elsif ($d_type eq 'Same-Strand') {
	$last_min_same_displace = $min_same_displace;
	$last_max_same_displace = $max_same_displace;
	$ss_tag = $current_info;
    }
    &show_info;
}  

sub drawcurve {
    my ($type, $contig1, $pos1, $contig2, $pos2, $color, $arrow, $tag) = @_;
    my ($x_start1, $x_end1, $y1, $x_scale1) = split(' ', $contig_positions{$contig1});
    my ($x_start2, $x_end2, $y2, $x_scale2) = split(' ', $contig_positions{$contig2});
    my $x1 = $x_start1 + $x_scale1 * $pos1;
    my $x2 = $x_start2 + $x_scale2 * $pos2;
    my $y_displace = $y1 == $y2 ? ($x1 - $x2) / 2 : 0;
    $y_displace *= -1 if $y_displace < 0;
    $y_displace += 15;
    $y_displace = ($y1 + $y2) / 2 - $y_displace;
    $min_y = $y_displace if $min_y > $y_displace;
    my $curve = $canvas->create('line', $x1, $y1, ($x1 + $x2) / 2, $y_displace, $x2,  $y2, 
				-width => 1, -fill => $color, -smooth => 'on', 
				-arrow => $arrow);
    $canvas->addtag($type,'withtag',$curve);
    $canvas->addtag("COLOR $color",'withtag',$curve);
    $canvas->addtag("TEXT $tag",'withtag',$curve);
    print STDERR "$tag\n";
}

sub highlight_selected {
    &unselect;

    $canvas->itemconfigure('current', -fill => $select_color);
    my @tags = $canvas->gettags('current');
    for (@tags) {
	my ($tag, $value) = split(' ', $_, 2);
	if ($tag eq 'TEXT') {
	    $info2->configure(-text => "SELECTED: $value");
	    last;
	}
    }
    $canvas->addtag('selected','withtag','current');
}

sub unselect {
    my @tags = $canvas->gettags('selected');

    for (@tags) {
	my ($tag, $value) = split(' ', $_);
	if ($tag eq 'COLOR') {
	    $canvas->itemconfigure('selected', -fill => $value);
	    last;
	}
    }
    $canvas->dtag('selected');	# 
    $info2->configure(-text => "NOTHING SELECTED\n\n\n");
}

sub show_info {
    my $color_tag = $contig_match_tag || $chimera_match_tag || $fwd_rev_tag || $ss_tag ? "Color code: $problem_color = problem;\n $ok_color = ok; $grayzone_color = grayzone" : "";
    $info1a->configure(-text => join("\n", $contig_match_tag, $chimera_match_tag, $unalign_tag, $qual_tag, $depth_tag .$reduced_depth_tag));
    $info1b->configure(-text => join("\n", $fwd_rev_tag, $ss_tag, $color_tag));
}

sub reset_display {
    &unselect;			# 
    $info1a->configure(-text => "NOTHING SHOWN\n\n\n");
    $info1b->configure(-text => "\n\n\n");
    ($x_start, $max_x) = (100, 100);  
    ($first_y, $min_y, $max_y) = (50, 0, 0);

    $canvas->delete('contig');
    ($last_horiz_mag, $last_spacing_mag) = (-1, -1);
    $unalign_tag = "";
    &delete_contig_matches;
    &delete_chimera_matches;
    &delete_fwd_rev;
    &delete_ss;
    &delete_depths;
    &delete_quals;
}

sub delete_contig_matches {
    $canvas->delete('contig_match');
    $contig_match_tag = "";
    ($last_contig_LLR_cutoff, $last_contig_unalign_cutoff) = (500, -1);
} 

sub delete_chimera_matches {
    $canvas->delete('chimera_match');
    $chimera_match_tag = "";
    ($last_chimera_LLR_cutoff, $last_chimera_unalign_cutoff) = (500, -1);
}

sub delete_fwd_rev {
    $canvas->delete('Fwd-Rev');
    $fwd_rev_tag = "";
    ($last_min_opp_displace, $last_max_opp_displace) = (-1, -1);
}

sub delete_ss {
    $canvas->delete('Same-Strand');
    $ss_tag = "";
    ($last_min_same_displace, $last_max_same_displace) = (-1, -1);
}   

sub delete_depths {
    $canvas->delete('depth');
    $canvas->delete('depth_scale');
    $depth_tag = $reduced_depth_tag = "";
    $last_depth_scale_mag = -1;
}

sub delete_quals {
    $canvas->delete('qual');
    $canvas->delete('qual_scale');
    $qual_tag = "";
    $last_qual_cut = -1;	
    $last_qual_scale_mag = -1;	
}
